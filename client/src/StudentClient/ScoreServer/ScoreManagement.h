/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ScoreManagement_H
#define ScoreManagement_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "ScoreServer_types.h"

namespace ScoreServer {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ScoreManagementIf {
 public:
  virtual ~ScoreManagementIf() {}
  virtual int32_t add(const Student& student, const std::string& info) = 0;
  virtual int32_t remove(const Student& student, const std::string& info) = 0;
  virtual int32_t get(const int32_t id, const std::string& name, const std::string& course, const std::string& info) = 0;
};

class ScoreManagementIfFactory {
 public:
  typedef ScoreManagementIf Handler;

  virtual ~ScoreManagementIfFactory() {}

  virtual ScoreManagementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ScoreManagementIf* /* handler */) = 0;
  };

class ScoreManagementIfSingletonFactory : virtual public ScoreManagementIfFactory {
 public:
  ScoreManagementIfSingletonFactory(const ::std::shared_ptr<ScoreManagementIf>& iface) : iface_(iface) {}
  virtual ~ScoreManagementIfSingletonFactory() {}

  virtual ScoreManagementIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ScoreManagementIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ScoreManagementIf> iface_;
};

class ScoreManagementNull : virtual public ScoreManagementIf {
 public:
  virtual ~ScoreManagementNull() {}
  int32_t add(const Student& /* student */, const std::string& /* info */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove(const Student& /* student */, const std::string& /* info */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t get(const int32_t /* id */, const std::string& /* name */, const std::string& /* course */, const std::string& /* info */) override {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ScoreManagement_add_args__isset {
  _ScoreManagement_add_args__isset() : student(false), info(false) {}
  bool student :1;
  bool info :1;
} _ScoreManagement_add_args__isset;

class ScoreManagement_add_args {
 public:

  ScoreManagement_add_args(const ScoreManagement_add_args&);
  ScoreManagement_add_args& operator=(const ScoreManagement_add_args&);
  ScoreManagement_add_args() noexcept
                           : info() {
  }

  virtual ~ScoreManagement_add_args() noexcept;
  Student student;
  std::string info;

  _ScoreManagement_add_args__isset __isset;

  void __set_student(const Student& val);

  void __set_info(const std::string& val);

  bool operator == (const ScoreManagement_add_args & rhs) const
  {
    if (!(student == rhs.student))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const ScoreManagement_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScoreManagement_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ScoreManagement_add_pargs {
 public:


  virtual ~ScoreManagement_add_pargs() noexcept;
  const Student* student;
  const std::string* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScoreManagement_add_result__isset {
  _ScoreManagement_add_result__isset() : success(false) {}
  bool success :1;
} _ScoreManagement_add_result__isset;

class ScoreManagement_add_result {
 public:

  ScoreManagement_add_result(const ScoreManagement_add_result&) noexcept;
  ScoreManagement_add_result& operator=(const ScoreManagement_add_result&) noexcept;
  ScoreManagement_add_result() noexcept
                             : success(0) {
  }

  virtual ~ScoreManagement_add_result() noexcept;
  int32_t success;

  _ScoreManagement_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ScoreManagement_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ScoreManagement_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScoreManagement_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScoreManagement_add_presult__isset {
  _ScoreManagement_add_presult__isset() : success(false) {}
  bool success :1;
} _ScoreManagement_add_presult__isset;

class ScoreManagement_add_presult {
 public:


  virtual ~ScoreManagement_add_presult() noexcept;
  int32_t* success;

  _ScoreManagement_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ScoreManagement_remove_args__isset {
  _ScoreManagement_remove_args__isset() : student(false), info(false) {}
  bool student :1;
  bool info :1;
} _ScoreManagement_remove_args__isset;

class ScoreManagement_remove_args {
 public:

  ScoreManagement_remove_args(const ScoreManagement_remove_args&);
  ScoreManagement_remove_args& operator=(const ScoreManagement_remove_args&);
  ScoreManagement_remove_args() noexcept
                              : info() {
  }

  virtual ~ScoreManagement_remove_args() noexcept;
  Student student;
  std::string info;

  _ScoreManagement_remove_args__isset __isset;

  void __set_student(const Student& val);

  void __set_info(const std::string& val);

  bool operator == (const ScoreManagement_remove_args & rhs) const
  {
    if (!(student == rhs.student))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const ScoreManagement_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScoreManagement_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ScoreManagement_remove_pargs {
 public:


  virtual ~ScoreManagement_remove_pargs() noexcept;
  const Student* student;
  const std::string* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScoreManagement_remove_result__isset {
  _ScoreManagement_remove_result__isset() : success(false) {}
  bool success :1;
} _ScoreManagement_remove_result__isset;

class ScoreManagement_remove_result {
 public:

  ScoreManagement_remove_result(const ScoreManagement_remove_result&) noexcept;
  ScoreManagement_remove_result& operator=(const ScoreManagement_remove_result&) noexcept;
  ScoreManagement_remove_result() noexcept
                                : success(0) {
  }

  virtual ~ScoreManagement_remove_result() noexcept;
  int32_t success;

  _ScoreManagement_remove_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ScoreManagement_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ScoreManagement_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScoreManagement_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScoreManagement_remove_presult__isset {
  _ScoreManagement_remove_presult__isset() : success(false) {}
  bool success :1;
} _ScoreManagement_remove_presult__isset;

class ScoreManagement_remove_presult {
 public:


  virtual ~ScoreManagement_remove_presult() noexcept;
  int32_t* success;

  _ScoreManagement_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ScoreManagement_get_args__isset {
  _ScoreManagement_get_args__isset() : id(false), name(false), course(false), info(false) {}
  bool id :1;
  bool name :1;
  bool course :1;
  bool info :1;
} _ScoreManagement_get_args__isset;

class ScoreManagement_get_args {
 public:

  ScoreManagement_get_args(const ScoreManagement_get_args&);
  ScoreManagement_get_args& operator=(const ScoreManagement_get_args&);
  ScoreManagement_get_args() noexcept
                           : id(0),
                             name(),
                             course(),
                             info() {
  }

  virtual ~ScoreManagement_get_args() noexcept;
  int32_t id;
  std::string name;
  std::string course;
  std::string info;

  _ScoreManagement_get_args__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_course(const std::string& val);

  void __set_info(const std::string& val);

  bool operator == (const ScoreManagement_get_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(course == rhs.course))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const ScoreManagement_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScoreManagement_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ScoreManagement_get_pargs {
 public:


  virtual ~ScoreManagement_get_pargs() noexcept;
  const int32_t* id;
  const std::string* name;
  const std::string* course;
  const std::string* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScoreManagement_get_result__isset {
  _ScoreManagement_get_result__isset() : success(false) {}
  bool success :1;
} _ScoreManagement_get_result__isset;

class ScoreManagement_get_result {
 public:

  ScoreManagement_get_result(const ScoreManagement_get_result&) noexcept;
  ScoreManagement_get_result& operator=(const ScoreManagement_get_result&) noexcept;
  ScoreManagement_get_result() noexcept
                             : success(0) {
  }

  virtual ~ScoreManagement_get_result() noexcept;
  int32_t success;

  _ScoreManagement_get_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ScoreManagement_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ScoreManagement_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScoreManagement_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScoreManagement_get_presult__isset {
  _ScoreManagement_get_presult__isset() : success(false) {}
  bool success :1;
} _ScoreManagement_get_presult__isset;

class ScoreManagement_get_presult {
 public:


  virtual ~ScoreManagement_get_presult() noexcept;
  int32_t* success;

  _ScoreManagement_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ScoreManagementClient : virtual public ScoreManagementIf {
 public:
  ScoreManagementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ScoreManagementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add(const Student& student, const std::string& info) override;
  void send_add(const Student& student, const std::string& info);
  int32_t recv_add();
  int32_t remove(const Student& student, const std::string& info) override;
  void send_remove(const Student& student, const std::string& info);
  int32_t recv_remove();
  int32_t get(const int32_t id, const std::string& name, const std::string& course, const std::string& info) override;
  void send_get(const int32_t id, const std::string& name, const std::string& course, const std::string& info);
  int32_t recv_get();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ScoreManagementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ScoreManagementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ScoreManagementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ScoreManagementProcessor(::std::shared_ptr<ScoreManagementIf> iface) :
    iface_(iface) {
    processMap_["add"] = &ScoreManagementProcessor::process_add;
    processMap_["remove"] = &ScoreManagementProcessor::process_remove;
    processMap_["get"] = &ScoreManagementProcessor::process_get;
  }

  virtual ~ScoreManagementProcessor() {}
};

class ScoreManagementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ScoreManagementProcessorFactory(const ::std::shared_ptr< ScoreManagementIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ScoreManagementIfFactory > handlerFactory_;
};

class ScoreManagementMultiface : virtual public ScoreManagementIf {
 public:
  ScoreManagementMultiface(std::vector<std::shared_ptr<ScoreManagementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ScoreManagementMultiface() {}
 protected:
  std::vector<std::shared_ptr<ScoreManagementIf> > ifaces_;
  ScoreManagementMultiface() {}
  void add(::std::shared_ptr<ScoreManagementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add(const Student& student, const std::string& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(student, info);
    }
    return ifaces_[i]->add(student, info);
  }

  int32_t remove(const Student& student, const std::string& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(student, info);
    }
    return ifaces_[i]->remove(student, info);
  }

  int32_t get(const int32_t id, const std::string& name, const std::string& course, const std::string& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(id, name, course, info);
    }
    return ifaces_[i]->get(id, name, course, info);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ScoreManagementConcurrentClient : virtual public ScoreManagementIf {
 public:
  ScoreManagementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ScoreManagementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add(const Student& student, const std::string& info) override;
  int32_t send_add(const Student& student, const std::string& info);
  int32_t recv_add(const int32_t seqid);
  int32_t remove(const Student& student, const std::string& info) override;
  int32_t send_remove(const Student& student, const std::string& info);
  int32_t recv_remove(const int32_t seqid);
  int32_t get(const int32_t id, const std::string& name, const std::string& course, const std::string& info) override;
  int32_t send_get(const int32_t id, const std::string& name, const std::string& course, const std::string& info);
  int32_t recv_get(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
