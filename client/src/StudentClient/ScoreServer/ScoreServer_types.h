/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ScoreServer_TYPES_H
#define ScoreServer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace ScoreServer {

class Student;

typedef struct _Student__isset {
  _Student__isset() : id(false), name(false), course(false), score(false) {}
  bool id :1;
  bool name :1;
  bool course :1;
  bool score :1;
} _Student__isset;

class Student : public virtual ::apache::thrift::TBase {
 public:

  Student(const Student&);
  Student& operator=(const Student&);
  Student() noexcept
          : id(0),
            name(),
            course(),
            score(0) {
  }

  virtual ~Student() noexcept;
  int32_t id;
  std::string name;
  std::string course;
  int32_t score;

  _Student__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_course(const std::string& val);

  void __set_score(const int32_t val);

  bool operator == (const Student & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(course == rhs.course))
      return false;
    if (!(score == rhs.score))
      return false;
    return true;
  }
  bool operator != (const Student &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Student & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Student &a, Student &b);

std::ostream& operator<<(std::ostream& out, const Student& obj);

} // namespace

#endif
